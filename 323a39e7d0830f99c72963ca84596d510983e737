{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1b0a85bb_cb7595bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10067
      },
      "writtenOn": "2022-01-23T19:53:59Z",
      "side": 1,
      "message": "Wouldn\u0027t it be better to git merge each tag one by one instead of cherry picking each change separately?",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ebef106_50be4d8f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 24438
      },
      "writtenOn": "2022-01-23T19:59:54Z",
      "side": 1,
      "message": "Facts: you can merge, then cherry-pick the merge commit using `-m 1` and push the new HEAD to gerrit",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27122cd4_8c3a080f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3864
      },
      "writtenOn": "2022-01-23T20:16:40Z",
      "side": 1,
      "message": "Hmm I\u0027m used to \"cherry-pick -x\" for backports so the original commit hash also shows up in the commit message. What would be the advantage of merging each commit individually instead of cherry picking it? That is a workflow I\u0027m not used to.",
      "parentUuid": "1b0a85bb_cb7595bc",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82dc20a0_346acb4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3864
      },
      "writtenOn": "2022-01-23T20:16:40Z",
      "side": 1,
      "message": "Now I\u0027m confused if you are suggesting to invoke \"git merge\" 5k times for each commit individually like Lukasz suggested above, or if you mean to merge the two heads and then to resolve a large conflict at once.\n\nIf you mean to merging the two heads with a single merge command, that would then require lots of more difficult work to sort out the reject/conflict than the workflow I used.\n\nThis did 5k cherry picks and at every failed cherry-pick it invoked logics to resolve the rejects with automation (kdiff3 in batch mode) to avoid losing commits where an automated resolution is possible, but that git cannot resolve (and clearly I cannot use ours/theirs, it needs 3way logics to take the decision if a conflict can be resolved automatically). I didn\u0027t spend almost any time resolving any conflict. I only checked those commits that couldn\u0027t be merged automatically appeared not critical and I fixed a few bits for the build (as in the timer driver).",
      "parentUuid": "2ebef106_50be4d8f",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0ab486e_38025af1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3864
      },
      "writtenOn": "2022-01-23T20:29:55Z",
      "side": 1,
      "message": "I guess the problem here is gerrit, but it\u0027s not ideal to pick a workflow just because it\u0027s the workflow gerrit can handle natively. If this was gitlab I could have posted the 5k cherry-picks as 5k incremental commits (with no merge commit) here instead of being able to post only the flattened version with a link to the signed tag with the cherry-picks in an external git tree...\n\nOn a side note, I forgot to specify it in the header, I also verified that each commit that got successfully cherry-picked by the automation, didn\u0027t have a fixme commit in the same range that failed its cherry-picking. That\u0027s something to double check every time, to be sure the automation didn\u0027t succeed at merging a bug, but failed to merge the incremental fix.",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "597e2ec2_e7274035",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3864
      },
      "writtenOn": "2022-01-23T21:20:35Z",
      "side": 1,
      "message": "The commits that failed cherry-picking but that kdiff3 resolved automatically were specifically these one below:\n\n   -:  ------------- \u003e  220:  7cc37d2e2735c net: refactor bind_bucket fastreuse into helper\n   -:  ------------- \u003e  631:  82be18dfc43e3 mm: fix double page fault on arm64 if PTE_AF is cleared\n   -:  ------------- \u003e  688:  6f9403d103983 mm: avoid data corruption on CoW fault into PFN-mapped VMA\n   -:  ------------- \u003e  975:  ba1e4f07a4d96 mailbox: avoid timer start from callback\n   -:  ------------- \u003e 1139:  0e9f691b53c17 usb: dwc3: core: add phy cleanup for probe error handling\n   -:  ------------- \u003e 1140:  35d7a7768580c usb: dwc3: core: don\u0027t trigger runtime pm when remove driver\n   -:  ------------- \u003e 1535:  e9dacd2a1de19 scsi: ufs: Make sure clk scaling happens only when HBA is runtime ACTIVE\n   -:  ------------- \u003e 1751:  4f44a7f0410d4 soc: qcom: smp2p: Safely acquire spinlock without IRQs\n   -:  ------------- \u003e 1840:  7348f44922413 usb: gadget: f_uac2: reset wMaxPacketSize\n   -:  ------------- \u003e 1855:  8cafca9adc0bc ANDROID: cuttlefish_defconfig: add missing CONFIG_BLK_CGROUP\n   -:  ------------- \u003e 2399:  f1c94793d86e4 usb: gadget: f_uac2: always increase endpoint max_packet_size by one audio slot\n   -:  ------------- \u003e 3328:  915da7ac2a86e usb: dwc3: core: fix kernel panic when do reboot\n\nThere is always some risk in having kdiff3 resolve a conflict automatically (I have it set in \"full analysis\" mode), but I believe it\u0027s a lower risk than not merging the commit, for example 6f9403d103983 avoids data corruption so it\u0027s good thing it didn\u0027t end up in the list of not merged commits.\n\nIt\u0027s trivial to generate the tree of cherry-picks vs cherry-picks+kdiff3 and compare them, that\u0027s how I just generated the above list. So in addition I also reviewed the diff between these two trees (w/ and w/o kdiff extra conflict resolution) for extra safety and there were not apparent mismerges as result of kdiff3 being used on top of cherry-pick, just more commits included (above). I already discarded two cases I found earlier of mismerge from kdiff3.\n\nI also forgot to mention two other minor details.\n\nThe below commit was already applied. git cherry-pick (well before kdiff3) caused a mismerge and the fix was just to drop it because it was already applied. I\u0027m sure a git merge (instead of git cherry-pick) would have done the same silent mistake, but just dropping one commit in git rebase is quicker to resolve.\n\n 421:  e47c158717dec \u003c    -:  ------------- writeback: Protect inode-\u003ei_io_list with inode-\u003ei_lock\n\nI also dropped these 3 commits while I was still fixing build issues:\n\n4219:  d917e623744e3 \u003c    -:  ------------- compiler.h: Introduce absolute_pointer macro \n4220:  af814e75a9603 \u003c    -:  ------------- net: i825xx: Use absolute_pointer for memcpy from fixed memory location\n4223:  b4bae57c9fa29 \u003c    -:  ------------- parisc: Use absolute_pointer() to define PAGE0\n\nI believe it\u0027d be possible to re-apply them now, that the build is fixed.\n\nI didn\u0027t bother to re-apply because they\u0027re irrelevant for LOS. Their only purpose is to shutdown some build warning with gcc 11 so they don\u0027t apply here.",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "011b7549_1d370e5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 28795
      },
      "writtenOn": "2022-01-24T16:54:18Z",
      "side": 1,
      "message": "personally do not like this, so I\u0027ll drop CR-1 here.\n\nReason:\n- You should merge branch `android-4.14-stable` from kernel/common.\n- Currently this kernel totally a mess, filled with OEM s**ts. If luk accepts to merge ASB tags, we\u0027d better do a big cleanup first and rebase it onto a more recent and stable CAF baseline.",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8465d1e_b72ce0bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3864
      },
      "writtenOn": "2022-01-24T17:40:34Z",
      "side": 1,
      "message": "I do not like this either and I\u0027d prefer to rebase on android13-5.15 or a somewhat more recent kernel like centos-9 or 5.15-LTS aa.git that I run elsewhere.\n\nThis is what I could do in 1 hour with near full automation with the only short term objective to be a stop-gap measure to get rid of this:\n\ngit log lineage/lineage-18.1..lineage-18.1_android-4.14-q |grep CVE | wc -l\n37\n\nAnd as you should know lots of CVE aren\u0027t tagged as CVE in the commit logs unfortunately so this is a gross underestimation of all fixes merged successfully with automation. If there was a way to single out only the security related bits I would have skipped the rest.\n\nIf you suggest me the exact tree where to rebase onto, I can give it a spin next weekend to see how far the automation goes, but the problem is that doing it that way, every commit that has conflicts cannot be safely skipped (like I skipped all commits touching f_accessory for example). So unless it goes in perfectly clean (which I doubt) it\u0027ll be a time consuming effort.",
      "parentUuid": "011b7549_1d370e5b",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "effc78ee_62e87c15",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 16185
      },
      "writtenOn": "2022-01-24T19:12:51Z",
      "side": 1,
      "message": "Lukas wasn\u0027t suggesting that. The normal workflow is to either:\n\nMerge linux-stable if kernel is no longer supported by Android by default (legacy, etc.)\n\nOR\n\nMerge the relevant google repo tag, so in this case kernel/msm on 4.14-q. Luk wasn\u0027t asking for _each commit_ to be merged, but each kernel revision of 4.14-q (probably only like, 20-something) to be merged.\n\nRelatively easy, and easy to keep revision tracking on for us (in case we need to bisect for issues).\n\nYour pitch of android13-5.15 isn\u0027t very feasible, as one, the oneplus additions might not be compatible, PLUS - really doubt the firmware/blobs will play nicely with that.. maybe I\u0027m wrong, just speaking from experience.",
      "parentUuid": "82dc20a0_346acb4d",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcb74dcd_8dd989b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 28795
      },
      "writtenOn": "2022-01-24T19:13:38Z",
      "side": 1,
      "message": "ah, you\u0027re just picking security fixes. Sorry for misunderstanding, I didn\u0027t carefully look over this change. (painful to review \u0026 write replies on a phone)\n\nSo there are still some questions/advice:\n\n- Not all commits tagged CVE are useful. I mean, literally most of them cannot be exploited on our hardware / Android platform. Of course automated scripts cannot handle this well, but we can manually discard some explicitly irrelevant changes.\n\n- The \"clean-up and rebase\" mentioned above is to say, on los19 branch we can make a brand new CAFest kernel with minimal OEM changes imported, so it will be easier to maintain \u0026 get upstream fixes merged safely. @LuK1337 any idea?",
      "parentUuid": "e8465d1e_b72ce0bc",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a42f0f9_d85a7d17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3864
      },
      "writtenOn": "2022-01-24T19:43:49Z",
      "side": 1,
      "message": "Correct, the objective was to cherry-pick just CVE security fixes that apply to LOS.\n\nHowever I can\u0027t just go over 5k commits to decide which applies and which not and can be safely skipped. Like I said I cannot only look at commit messages with the CVE tag in them because lots of CVE fixes misses the CVE tag. That might work for some, but it\u0027s not a sure thing.\n\nFor example this one that I cherry picked manually has no CVE tag in it and it does apply to LOS and it fixes CVE-2020-29374: https://github.com/LineageOS/android_kernel_oneplus_sm8150/commit/d7a4a3fcac7a050fcdc0a9c49cf81e35a793b7ae\n\nThis new commit is the automated bulk version of the above cherry-pick. It would have picked up that CVE fix too in fact, if we didn\u0027t already cherry-pick it manually earlier.",
      "parentUuid": "dcb74dcd_8dd989b9",
      "revId": "323a39e7d0830f99c72963ca84596d510983e737",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    }
  ]
}