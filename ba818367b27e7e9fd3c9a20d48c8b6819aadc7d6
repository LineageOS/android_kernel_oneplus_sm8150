{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "097c1843_afd71ddb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3864
      },
      "writtenOn": "2022-01-05T03:11:55Z",
      "side": 1,
      "message": "Hello,\n\nThis Change-Id: I654085cc1a3212eec603f5a1224cee0fdd1b45c6 is the tip of the patchset that is an alternate for CVE-2020-29374, instead of Change-Id: If6f9e1a80bd54bbee101aca3125582fa4b626459.\n\nTo reduce the complexity of the backport from aa.git mapcount_unshare branch, this is not handling THP and it will intentionally fail to build for safety in case somebody tries to enable THP in the kernel config. This shortcut was possible only because Android unfortunately don\u0027t seem to generally enable THP.\n\nChange-Id: If6f9e1a80bd54bbee101aca3125582fa4b626459 resolves the CVE by turning all read pins into write pins. This solution as opposed introduces a COR copy-on-read fault and it causes the read pin to invoke it by setting FOLL_UNSHARE whenever necessary according to the page exclusivity checked under page lock against mapcount+swapcount, so it remains transparent to the MM behavior (unlike Change-Id: If6f9e1a80bd54bbee101aca3125582fa4b626459) and it will not unnecessarily trigger copy-on-writes.\n\nThanks.",
      "revId": "ba818367b27e7e9fd3c9a20d48c8b6819aadc7d6",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ee338e6_67945686",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10067
      },
      "writtenOn": "2022-01-05T12:12:09Z",
      "side": 1,
      "message": "is chain starting with revert merged upstream?",
      "revId": "ba818367b27e7e9fd3c9a20d48c8b6819aadc7d6",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "141c3243_1fd3e4f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3864
      },
      "writtenOn": "2022-01-06T23:02:03Z",
      "side": 1,
      "message": "\u003e is chain starting with revert merged upstream?\n\nYes the first commit of the chain is the AOSP fix that is reverted in the second commit of this chain (it\u0027s also reverted upstream, but not reverted in AOSP common kernel) and then the alternative fix is applied after the revert commit.\n\nThe simplest fix is to apply the AOSP fix and stop there, but this full chain is my preferred solution since it has no side effects (even though the side effects should not bite the Android use cases).\n\nThanks!",
      "parentUuid": "0ee338e6_67945686",
      "revId": "ba818367b27e7e9fd3c9a20d48c8b6819aadc7d6",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e00a74b1_84cfa7eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 10067
      },
      "writtenOn": "2022-01-06T23:13:31Z",
      "side": 1,
      "message": "So alternative fix is in mainline?",
      "parentUuid": "141c3243_1fd3e4f2",
      "revId": "ba818367b27e7e9fd3c9a20d48c8b6819aadc7d6",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca0ddd37_badbd49f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3864
      },
      "writtenOn": "2022-01-07T02:05:06Z",
      "side": 1,
      "message": "It\u0027s not, but the AOSP fix is not in mainline anymore either, it is only in AOSP and -stable, it had to be reverted from mainline.\n\nThe alternate fix is in the mapcount_unshare branch of my git tree:\n\nhttps://gitlab.com/aarcange/aa/-/tree/mapcount_unshare\n\nThe reason the AOSP/-stable fix had to be reverted from mainline is that it causes various user ABI regressions, some related to unexpected side effects to the behavior of the ptrace reads and other side effects in terms of higher memory utilization in some case (for example short term pins on MAP_PRIVATE memory will erroneously COW). It\u0027s hard to tell if there\u0027s any driver like GPU drivers using GUP in a way that may lead to higher memory utilization.\n\nI run with the AOSP fix for a day and it appeared to work stable, so you can always try the AOSP fix first and then if there are problems you should promptly switch to this safer - even if more complex - alternate downstream fix. \n\nHere I stick to the alternate downstream fix since I think it\u0027s safer.\n\nYet another alternative that would work is to block vmsplice for unprivileged processes. The problem is that also would break any app that might be using it, so that\u0027s a change that would be better done at the AOSP level and it\u0027s a good idea regardless of this issue. This issue in theory can be exploited with any unprivileged user API allowing a unprivileged read GUP, so it cannot be fixed in vmpslice, however for all practical purposes vmsplice is the only vector that is allowing an unprivileged long term pin and that won\u0027t discharge the battery and make the phone hot and that will also reproduce trivially allowing an infinitely large window. All other vectors (i.e. O_DIRECT) are non concerning.",
      "parentUuid": "e00a74b1_84cfa7eb",
      "revId": "ba818367b27e7e9fd3c9a20d48c8b6819aadc7d6",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71"
    }
  ]
}